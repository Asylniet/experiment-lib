/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VariantsImport } from './routes/variants'
import { Route as FeatureFlagHookImport } from './routes/feature-flag-hook'
import { Route as FeatureFlagComponentImport } from './routes/feature-flag-component'
import { Route as AbnTestHookImport } from './routes/abn-test-hook'
import { Route as AbnTestComponentImport } from './routes/abn-test-component'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const VariantsRoute = VariantsImport.update({
  id: '/variants',
  path: '/variants',
  getParentRoute: () => rootRoute,
} as any)

const FeatureFlagHookRoute = FeatureFlagHookImport.update({
  id: '/feature-flag-hook',
  path: '/feature-flag-hook',
  getParentRoute: () => rootRoute,
} as any)

const FeatureFlagComponentRoute = FeatureFlagComponentImport.update({
  id: '/feature-flag-component',
  path: '/feature-flag-component',
  getParentRoute: () => rootRoute,
} as any)

const AbnTestHookRoute = AbnTestHookImport.update({
  id: '/abn-test-hook',
  path: '/abn-test-hook',
  getParentRoute: () => rootRoute,
} as any)

const AbnTestComponentRoute = AbnTestComponentImport.update({
  id: '/abn-test-component',
  path: '/abn-test-component',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/abn-test-component': {
      id: '/abn-test-component'
      path: '/abn-test-component'
      fullPath: '/abn-test-component'
      preLoaderRoute: typeof AbnTestComponentImport
      parentRoute: typeof rootRoute
    }
    '/abn-test-hook': {
      id: '/abn-test-hook'
      path: '/abn-test-hook'
      fullPath: '/abn-test-hook'
      preLoaderRoute: typeof AbnTestHookImport
      parentRoute: typeof rootRoute
    }
    '/feature-flag-component': {
      id: '/feature-flag-component'
      path: '/feature-flag-component'
      fullPath: '/feature-flag-component'
      preLoaderRoute: typeof FeatureFlagComponentImport
      parentRoute: typeof rootRoute
    }
    '/feature-flag-hook': {
      id: '/feature-flag-hook'
      path: '/feature-flag-hook'
      fullPath: '/feature-flag-hook'
      preLoaderRoute: typeof FeatureFlagHookImport
      parentRoute: typeof rootRoute
    }
    '/variants': {
      id: '/variants'
      path: '/variants'
      fullPath: '/variants'
      preLoaderRoute: typeof VariantsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/abn-test-component': typeof AbnTestComponentRoute
  '/abn-test-hook': typeof AbnTestHookRoute
  '/feature-flag-component': typeof FeatureFlagComponentRoute
  '/feature-flag-hook': typeof FeatureFlagHookRoute
  '/variants': typeof VariantsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/abn-test-component': typeof AbnTestComponentRoute
  '/abn-test-hook': typeof AbnTestHookRoute
  '/feature-flag-component': typeof FeatureFlagComponentRoute
  '/feature-flag-hook': typeof FeatureFlagHookRoute
  '/variants': typeof VariantsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/abn-test-component': typeof AbnTestComponentRoute
  '/abn-test-hook': typeof AbnTestHookRoute
  '/feature-flag-component': typeof FeatureFlagComponentRoute
  '/feature-flag-hook': typeof FeatureFlagHookRoute
  '/variants': typeof VariantsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/abn-test-component'
    | '/abn-test-hook'
    | '/feature-flag-component'
    | '/feature-flag-hook'
    | '/variants'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/abn-test-component'
    | '/abn-test-hook'
    | '/feature-flag-component'
    | '/feature-flag-hook'
    | '/variants'
  id:
    | '__root__'
    | '/'
    | '/abn-test-component'
    | '/abn-test-hook'
    | '/feature-flag-component'
    | '/feature-flag-hook'
    | '/variants'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AbnTestComponentRoute: typeof AbnTestComponentRoute
  AbnTestHookRoute: typeof AbnTestHookRoute
  FeatureFlagComponentRoute: typeof FeatureFlagComponentRoute
  FeatureFlagHookRoute: typeof FeatureFlagHookRoute
  VariantsRoute: typeof VariantsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AbnTestComponentRoute: AbnTestComponentRoute,
  AbnTestHookRoute: AbnTestHookRoute,
  FeatureFlagComponentRoute: FeatureFlagComponentRoute,
  FeatureFlagHookRoute: FeatureFlagHookRoute,
  VariantsRoute: VariantsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/abn-test-component",
        "/abn-test-hook",
        "/feature-flag-component",
        "/feature-flag-hook",
        "/variants"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/abn-test-component": {
      "filePath": "abn-test-component.tsx"
    },
    "/abn-test-hook": {
      "filePath": "abn-test-hook.tsx"
    },
    "/feature-flag-component": {
      "filePath": "feature-flag-component.tsx"
    },
    "/feature-flag-hook": {
      "filePath": "feature-flag-hook.tsx"
    },
    "/variants": {
      "filePath": "variants.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
